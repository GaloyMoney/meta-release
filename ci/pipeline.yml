#@ load("@ytt:data", "data")

#@ deployments = ["infra", "bitcoin", "galoy", "monitoring", "addons"]

#@ def pipeline_image():
#@   return data.values.docker_registry + "/release-pipeline"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ pipeline_image()
#@ end

#@ def cepler_config(deployment):
#@   return "cepler/" + deployment + ".yml"
#@ end

#@ def cepler_resource_name(deployment):
#@   return deployment + "-in"
#@ end

#@ def cepler_out_name(deployment):
#@   return deployment + "-out"
#@ end

#@ def cepler_in(deployment):
name: #@ cepler_resource_name(deployment)
type: cepler-in
source:
  uri: #@ data.values.deployments_git_uri
  branch: #@ data.values.deployments_git_branch
  private_key: #@ data.values.github_private_key
  environment: #@ data.values.release_environment
  config: #@ cepler_config(deployment)
#@ end

#@ def cepler_out(deployment):
name: #@ cepler_out_name(deployment)
type: cepler-out
source:
  uri: #@ data.values.deployments_git_uri
  branch: #@ data.values.deployments_git_branch
  private_key: #@ data.values.github_private_key
  config: #@ cepler_config(deployment)
#@ end

groups:
#@ for depl in deployments:
- name: #@ depl
  jobs:
  - #@ depl + "-release"
#@ end
- name: image
  jobs:
  - build-release-pipeline-image
- name: all
  jobs:
#@ for depl in deployments:
  - #@ depl + "-release"
#@ end
  - build-release-pipeline-image

jobs:
#@ for depl in deployments:
- name: #@ depl + "-release"
  plan:
  - in_parallel:
    - get: repo
    - get: #@ cepler_resource_name(depl)
      trigger: true
  - task: release
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: repo
      - name: #@ cepler_resource_name(depl)
      outputs:
      - name: repo
      run:
        path: #@ "repo/ci/tasks/release-" + depl + ".sh"
  - put: repo
    params:
      repository: repo
  - put: #@ cepler_out_name(depl)
    params:
      repository: #@ cepler_resource_name(depl)
      environment: #@ data.values.release_environment
      rebase: true
#@ end

- name: build-release-pipeline-image
  serial: true
  plan:
  - get: release-pipeline-image-def
    trigger: true
  - task: build
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      inputs:
      - name: release-pipeline-image-def
      outputs:
      - name: image
      params:
        CONTEXT: release-pipeline-image-def/ci/image
      run:
        path: build
  - put: release-pipeline-image
    params:
      image: image/image.tar

resources:
- name: repo
  type: git
  source:
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
  
- name: release-pipeline-image
  type: registry-image
  source:
    tag: latest
    username: #@ data.values.docker_registry_user
    password: #@ data.values.docker_registry_password
    repository: #@ pipeline_image()

- name: release-pipeline-image-def
  type: git
  source:
    paths: [ci/image/Dockerfile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

#@ for depl in deployments:
- #@ cepler_in(depl)
- #@ cepler_out(depl)
#@ end

resource_types:
- name: cepler-in
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: latest

- name: cepler-out
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: latest
