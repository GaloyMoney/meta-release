#@ load("@ytt:data", "data")

#@ charts_vendir_refs = {
#@   "bitcoind": "bitcoind-in/modules/services/bitcoin/vendor/bitcoind/git-ref/ref"
#@ }

#@ infra_git_ref = "infra-in/modules/infra/vendor/git-ref/ref"

#@ charts = charts_vendir_refs.keys()

#@ def pipeline_image():
#@   return data.values.docker_registry + "/release-pipeline"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ pipeline_image()
#@ end

#@ def cepler_config(deployment):
#@   return "cepler/" + deployment + ".yml"
#@ end

#@ def cepler_resource_name(deployment):
#@   return deployment + "-in"
#@ end

#@ def cepler_in(deployment):
name: #@ cepler_resource_name(deployment)
type: cepler-in
source:
  uri: #@ data.values.deployments_git_uri
  branch: #@ data.values.deployments_git_branch
  private_key: #@ data.values.github_private_key
  environment: #@ data.values.release_environment
  config: #@ cepler_config(deployment)
#@ end

#@ def version_resource_name(deployment):
#@   return deployment + "-version"
#@ end

#@ def version_resource(deployment):
name: #@ version_resource_name(deployment)
type: semver
source:
  initial_version: 0.1.0
  driver: git
  file: #@ version_resource_name(deployment)
  uri: #@ data.values.git_uri
  branch: #@ data.values.git_version_branch
  private_key: #@ data.values.github_private_key
#@ end

#@ def gh_release_resource_name(deployment):
#@   return "gh-release-" + deployment
#@ end

#@ def gh_release_resource(deployment, repository):
name: #@ gh_release_resource_name(deployment)
type: github-release
source:
  owner: #@ data.values.gh_org
  repository: #@ repository
  access_token: #@ data.values.github_api_token
#@ end

groups:
- name: all
  jobs:
#@ for depl in charts:
  - #@ depl + "-release"
#@ end
  - infra-release
  - build-release-pipeline-image
- name: image
  jobs:
  - build-release-pipeline-image

jobs:
#@ for chart in charts:
- name: #@ chart + "-release"
  plan:
  - in_parallel:
    - get: #@ cepler_resource_name(chart)
      trigger: true
    - get: #@ version_resource_name(chart)
    - get: meta-release
    - get: charts-repo

#! ------------ CHANGELOG ----------------

  - task: create-changelog
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: meta-release
      - name: #@ chart + "-repo"
        path: repo
      - name: #@ cepler_resource_name(chart)
      outputs:
      - name: changelog
      - name: release-commitid
      params:
        INCLUDE_PATH: #@ "charts/" + chart + "/*"
        new_git_ref_path: #@ charts_vendir_refs[chart]
      run:
        path: meta-release/ci/tasks/changelog.sh

#! ------------ RELEASE ----------------

  - task: checkout-release-branch
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: meta-release
      - name: release-commitid
      - name: #@ chart + "-repo"
        path: repo
      outputs:
      - name: #@ chart + "-repo"
        path: repo
      run:
        path: meta-release/ci/tasks/checkout-release-branch.sh

  - task: prep-release
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: meta-release
      - name: changelog
      - name: release-commitid
      - name: #@ version_resource_name(chart)
        path: version
      - name: charts-repo
        path: repo
      outputs:
      - name: gh-release
      - name: charts-repo
        path: repo
      - name: #@ version_resource_name(chart)
        path: version
      params:
        CHART: #@ chart
      run:
        path: meta-release/ci/tasks/prep-release-chart.sh
  
  - put: charts-repo
    params:
      repository: charts-repo
      branch: #@ data.values.stable_git_branch + "-stable"
      tag: gh-release/tag

  - put: #@ gh_release_resource_name(chart)
    params:
      name: gh-release/name
      tag: gh-release/tag
      body: gh-release/notes.md
      globs:
      - gh-release/files/*.tgz

#@ end

- name: infra-release
  plan:
  - in_parallel:
    - get: #@ cepler_resource_name("infra")
      trigger: true
    - get: #@ version_resource_name("infra")
    - { get: meta-release }
    - { get: infra-repo }

#! ------------ CHANGELOG ----------------

  - task: create-changelog
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: meta-release
      - name: infra-repo
        path: repo
      - name: #@ cepler_resource_name("infra")
      outputs:
      - name: changelog
      - name: release-commitid
      params:
        new_git_ref_path: #@ infra_git_ref
      run:
        path: meta-release/ci/tasks/changelog.sh

#! ------------ RELEASE ----------------

  - task: prep-release
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: meta-release
      - name: changelog
      - name: release-commitid
      - name: #@ version_resource_name("infra")
        path: version
      - name: infra-repo
        path: repo-stable
      outputs:
      - name: gh-release
      - name: infra-repo
        path: repo-stable
      - name: #@ version_resource_name("infra")
        path: version
      run:
        path: meta-release/ci/tasks/prep-release-infra.sh

  - put: infra-repo
    params:
      repository: infra-repo
      branch: #@ data.values.stable_git_branch
      tag: gh-release/tag

  - put: #@ gh_release_resource_name("infra")
    params:
      name: gh-release/name
      tag: gh-release/tag
      body: gh-release/notes.md

  - put: #@ version_resource_name("infra")
    params: 
      file: #@ version_resource_name("infra") + "/version"

- name: build-release-pipeline-image
  serial: true
  plan:
  - get: release-pipeline-image-def
    trigger: true
  - task: build
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      inputs:
      - name: release-pipeline-image-def
      outputs:
      - name: image
      params:
        CONTEXT: release-pipeline-image-def/ci/image
      run:
        path: build
  - put: release-pipeline-image
    params:
      image: image/image.tar

resources:
- name: charts-repo
  type: git
  source:
    uri: #@ data.values.charts_git_uri
    branch: #@ data.values.charts_git_branch
    private_key: #@ data.values.github_private_key

#@ for chart in charts:
- #@ version_resource(chart)
- #@ cepler_in(chart)
- #@ gh_release_resource(chart, data.values.charts_gh_repo)
#@ end

- name: infra-repo
  type: git
  source:
    uri: #@ data.values.infra_git_uri
    branch: #@ data.values.infra_git_branch
    private_key: #@ data.values.github_private_key

- #@ version_resource("infra")
- #@ cepler_in("infra")
- #@ gh_release_resource("infra", data.values.infra_gh_repo)

- name: meta-release
  type: git
  source:
    paths: 
    - "template.md"
    - "release.yml"
    - "ci/tasks/*"
    - "config.toml"
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
  
- name: release-pipeline-image
  type: registry-image
  source:
    tag: latest
    username: #@ data.values.docker_registry_user
    password: #@ data.values.docker_registry_password
    repository: #@ pipeline_image()

- name: release-pipeline-image-def
  type: git
  source:
    paths: [ci/image/Dockerfile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

resource_types:
- name: cepler-in
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: latest
